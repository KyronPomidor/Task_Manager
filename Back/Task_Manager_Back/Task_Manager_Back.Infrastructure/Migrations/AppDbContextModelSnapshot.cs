// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_Manager_Back.Infrastructure.DbContext;

#nullable disable

namespace Task_Manager_Back.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseTaskEntityDatabaseTaskLabel", b =>
                {
                    b.Property<Guid>("LabelsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LabelsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("DatabaseTaskEntityDatabaseTaskLabel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseCustomCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseTaskCustomCategories");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseRelationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseRelationTypes");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseTaskAttachments");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskCustomRelation", b =>
                {
                    b.Property<Guid>("FromTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FromTaskId", "ToTaskId", "RelationTypeId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("ToTaskId");

                    b.ToTable("DatabaseTaskCustomRelations");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskDependencyRelation", b =>
                {
                    b.Property<Guid>("FromTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FromTaskId", "ToTaskId");

                    b.HasIndex("ToTaskId");

                    b.ToTable("DatabaseTaskDependencyRelations");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DatabaseCustomCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatabaseCustomCategoryId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatabaseTaskPriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatabaseTaskStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFailed")
                        .HasColumnType("bit");

                    b.Property<int>("PositionOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseCustomCategoryId");

                    b.HasIndex("DatabaseCustomCategoryId1");

                    b.HasIndex("DatabaseTaskPriorityId");

                    b.HasIndex("DatabaseTaskStatusId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseTaskEntities");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskLabel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseTaskLabels");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseTaskPriorities");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskReminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReminderAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("DatabaseTaskReminders");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DatabaseTaskStatuses");
                });

            modelBuilder.Entity("DatabaseTaskEntityDatabaseTaskLabel", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskLabel", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseCustomCategory", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseCustomCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseRelationType", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskAttachment", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", "Task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskCustomRelation", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", "FromTask")
                        .WithMany("CustomRelationsFrom")
                        .HasForeignKey("FromTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseRelationType", "RelationType")
                        .WithMany("CustomRelations")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", "ToTask")
                        .WithMany("CustomRelationsTo")
                        .HasForeignKey("ToTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromTask");

                    b.Navigation("RelationType");

                    b.Navigation("ToTask");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskDependencyRelation", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", "FromTask")
                        .WithMany("DependenciesFrom")
                        .HasForeignKey("FromTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", "ToTask")
                        .WithMany("DependenciesTo")
                        .HasForeignKey("ToTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromTask");

                    b.Navigation("ToTask");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseCustomCategory", "DatabaseCustomCategory")
                        .WithMany()
                        .HasForeignKey("DatabaseCustomCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseCustomCategory", null)
                        .WithMany("Tasks")
                        .HasForeignKey("DatabaseCustomCategoryId1");

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskPriority", null)
                        .WithMany("Tasks")
                        .HasForeignKey("DatabaseTaskPriorityId");

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskStatus", null)
                        .WithMany("Tasks")
                        .HasForeignKey("DatabaseTaskStatusId");

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskPriority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DatabaseCustomCategory");

                    b.Navigation("Priority");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskLabel", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskPriority", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskReminder", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", "Task")
                        .WithMany("Reminders")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskStatus", b =>
                {
                    b.HasOne("Task_Manager_Back.Infrastructure.DatabaseEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseCustomCategory", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseRelationType", b =>
                {
                    b.Navigation("CustomRelations");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskEntity", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CustomRelationsFrom");

                    b.Navigation("CustomRelationsTo");

                    b.Navigation("DependenciesFrom");

                    b.Navigation("DependenciesTo");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskPriority", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Task_Manager_Back.Infrastructure.DatabaseEntities.DatabaseTaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
